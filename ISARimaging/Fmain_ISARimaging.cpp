//
// File: Fmain_ISARimaging.cpp
//
// MATLAB Coder version            : 4.1
// C/C++ source code generated on  : 07-Apr-2023 11:28:25
//

// Include Files
#include <cmath>
#include <string.h>
#include "rt_nonfinite.hpp"
#include "Fmain_ISARimaging.hpp"
#include "Fmain_ISARimaging_emxutil.hpp"
#include "Amplitude_limiting.hpp"
#include "abs.hpp"
#include "fftshift.hpp"
#include "fft.hpp"
#include "interp1.hpp"
#include "rdivide_helper.hpp"
#include "ifft.hpp"
#include "cos.hpp"
#include "atan.hpp"
#include "sqrt.hpp"
#include "power.hpp"
#include "exp.hpp"
#include "pixel_simulation.hpp"
#include <stdio.h>
#include <opencv2/opencv.hpp>
#include <iostream>
#include <opencv2/highgui/highgui.hpp>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>
#include <ctime>
#include "command_option.hpp"
//#include <mat.hpp>

using namespace cv;
// Function Declarations
static void eml_fftshift(emxArray_creal_T *x);

// Function Definitions

//
// Arguments    : emxArray_creal_T *x
// Return Type  : void
//

std::vector<std::string> split(const std::string& str, char delimiter) {
    std::vector<std::string> tokens;
    std::stringstream ss(str);
    std::string token;
    while (std::getline(ss, token, delimiter)) {
        tokens.push_back(token);
    }
    return tokens;
}

static void eml_fftshift(emxArray_creal_T *x)
{
  int npages;
  int i2;
  int i;
  int i1;
  int ib;
  int k;
  double tmp_re;
  double tmp_im;
  npages = x->size[1];
  i2 = 1;
  for (i = 0; i < npages; i++) {
    i1 = i2 - 1;
    i2 += 1024;
    ib = i1 + 512;
    for (k = 0; k < 512; k++) {
      tmp_re = x->data[i1].re;
      tmp_im = x->data[i1].im;
      x->data[i1] = x->data[ib];
      x->data[ib].re = tmp_re;
      x->data[ib].im = tmp_im;
      i1++;
      ib++;
    }
  }
}

//
// clear;close all;
// Arguments    : double range_sta
//                emxArray_real_T *I1
// Return Type  : void
//
void Fmain_ISARimaging(double, emxArray_real_T* I1, Mat img,  system_clock::time_point  time_1)
{
  boolean_T b0;
  int idx;
  int ii;
  int jj;
  boolean_T exitg1;
  int data_size_idx_0;
  int i_data[536];
  boolean_T guard1 = false;
  //printf("...\n");
  //std::cout<<"///\n";
  static const boolean_T bv0[536] = { false, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true, true, true, true, true,
    true, true, true, true, true, true, true, true, true };

  int i0;
  int i1;
  // int MData;
  // int NData;

  // MATFile* pmatFileData = NULL;
  // mxArray* pMxArrayData = NULL;

  // // ???data.mat?????????mat??????"data.mat"?????��???"data"??
  // double* data1;

  // pmatFileData = matOpen("data.mat", "r");
  // pMxArrayData = matGetVariable(pmatFileData, "data");
  // data1 = (double*)mxGetData(pMxArrayData);

  // MData = mxGetM(pMxArrayData);
  // NData = mxGetN(pMxArrayData);

  // // ???????
  double data_data[3752];
  // double data[3752];
  // for (int i = 0; i < MData; i++)
  //     for (int j = 0; j < NData; j++)
  //         data[MData * j + i] = data1[MData * j + i];

    std::ifstream file(FLAGS_isar_data);
    std::vector<std::vector<double>> data_matrix;

    if (file.is_open()) {
        std::string line;
        while (std::getline(file, line)) {
            std::vector<std::string> tokens = split(line, ',');
            std::vector<double> row;

            for (const std::string& token : tokens) {
                row.push_back(std::stod(token));
            }

            data_matrix.push_back(row);
        }
        file.close();
    }
    double data[3752];

    auto MData = data_matrix.size();
    auto NData = data_matrix[0].size();
    
    //std::cout<<NData<<std::endl;
    // for (int i = 0; i < MData; i++)
    //     for (int j = 0; j < NData; j++)
    //         data[MData * j + i] = data_matrix[i][j];
    //   for (double value : data) 
    // {
    //         std::cout << value << ",";
    // }
  int nn;
  emxArray_real_T *TargeRt;
  emxArray_real_T *X_radar;
  emxArray_real_T *Y_radar;
  emxArray_real_T *Z_radar;
  emxArray_real_T *x_radar;
  emxArray_real_T *theta;
  emxArray_creal_T *sig;
  emxArray_creal_T *sig_Interp1;
  emxArray_real_T *r0;
  emxArray_creal_T *r1;
  int i2;
  double Target_data[3752];
  double Rmin;
  double Rmax;
  double Na;
  double a;
  int ta_size_idx_1;
  double ta_data[536];
  int loop_ub_tmp;
  double Rg;
  double Ra;
  double b_a;
  // int MM;
  // int NN;

  // MATFile* pmatFile = NULL;
  // mxArray* pMxArray = NULL;

  // // ???gassap.mat?????????mat??????"initUrban.mat"?????��???"initA"??
  //  double* posxy1;

  // pmatFile = matOpen("gassap1.mat", "r");
  // pMxArray = matGetVariable(pmatFile, "gassap1");
  // posxy1 = (double*)mxGetData(pMxArray);

  // MM = mxGetM(pMxArray);
  // NN = mxGetN(pMxArray);

  // // ???????
  double posxy[1149];
  // for (int i = 0; i < MM; i++)
  //     for (int j = 0; j < NN; j++)
  //         posxy[MM * j + i] = posxy1[MM * j + i];
    std::ifstream file1(FLAGS_isar_posxy);
    std::vector<std::vector<double>> posxy_matrix;

    if (file1.is_open()) {
        std::string line;
        while (std::getline(file1, line)) {
            std::vector<std::string> tokens = split(line, ',');
            std::vector<double> row;

            for (const std::string& token : tokens) {
                row.push_back(std::stod(token));
            }

            posxy_matrix.push_back(row);
        }
        file1.close();
    }
    int MM = posxy_matrix.size();
    int NN = posxy_matrix[0].size();
    for (int i = 0; i < MM; i++)
        for (int j = 0; j < NN; j++)
            posxy[MM * j + i] = posxy_matrix[i][j];

  double dv1[1024];
  double dv2[1024];
  creal_T dcv0[1024];
  static const double dv3[1024] = { 1.0304423903774521E+11,
    1.0308841768443633E+11, 1.0313259633112743E+11, 1.0317677497781853E+11,
    1.0322095362450964E+11, 1.0326513227120074E+11, 1.0330931091789185E+11,
    1.0335348956458296E+11, 1.0339766821127406E+11, 1.0344184685796518E+11,
    1.0348602550465628E+11, 1.0353020415134738E+11, 1.035743827980385E+11,
    1.036185614447296E+11, 1.036627400914207E+11, 1.0370691873811182E+11,
    1.0375109738480292E+11, 1.0379527603149402E+11, 1.0383945467818513E+11,
    1.0388363332487624E+11, 1.0392781197156734E+11, 1.0397199061825845E+11,
    1.0401616926494955E+11, 1.0406034791164066E+11, 1.0410452655833177E+11,
    1.0414870520502287E+11, 1.0419288385171399E+11, 1.0423706249840509E+11,
    1.0428124114509619E+11, 1.0432541979178731E+11, 1.0436959843847841E+11,
    1.0441377708516951E+11, 1.0445795573186063E+11, 1.0450213437855173E+11,
    1.0454631302524283E+11, 1.0459049167193394E+11, 1.0463467031862505E+11,
    1.0467884896531615E+11, 1.0472302761200726E+11, 1.0476720625869836E+11,
    1.0481138490538947E+11, 1.0485556355208058E+11, 1.0489974219877168E+11,
    1.049439208454628E+11, 1.049880994921539E+11, 1.05032278138845E+11,
    1.0507645678553612E+11, 1.0512063543222722E+11, 1.0516481407891832E+11,
    1.0520899272560944E+11, 1.0525317137230054E+11, 1.0529735001899164E+11,
    1.0534152866568275E+11, 1.0538570731237386E+11, 1.0542988595906496E+11,
    1.0547406460575607E+11, 1.0551824325244717E+11, 1.0556242189913828E+11,
    1.0560660054582939E+11, 1.0565077919252049E+11, 1.0569495783921161E+11,
    1.0573913648590271E+11, 1.0578331513259381E+11, 1.0582749377928493E+11,
    1.0587167242597603E+11, 1.0591585107266713E+11, 1.0596002971935825E+11,
    1.0600420836604935E+11, 1.0604838701274045E+11, 1.0609256565943156E+11,
    1.0613674430612267E+11, 1.0618092295281377E+11, 1.0622510159950488E+11,
    1.0626928024619598E+11, 1.063134588928871E+11, 1.063576375395782E+11,
    1.064018161862693E+11, 1.0644599483296042E+11, 1.0649017347965152E+11,
    1.0653435212634262E+11, 1.0657853077303374E+11, 1.0662270941972484E+11,
    1.0666688806641594E+11, 1.0671106671310706E+11, 1.0675524535979816E+11,
    1.0679942400648926E+11, 1.0684360265318037E+11, 1.0688778129987148E+11,
    1.0693195994656258E+11, 1.0697613859325369E+11, 1.0702031723994479E+11,
    1.0706449588663591E+11, 1.0710867453332701E+11, 1.0715285318001811E+11,
    1.0719703182670923E+11, 1.0724121047340033E+11, 1.0728538912009143E+11,
    1.0732956776678255E+11, 1.0737374641347365E+11, 1.0741792506016475E+11,
    1.0746210370685587E+11, 1.0750628235354697E+11, 1.0755046100023807E+11,
    1.0759463964692918E+11, 1.0763881829362029E+11, 1.0768299694031139E+11,
    1.077271755870025E+11, 1.077713542336936E+11, 1.0781553288038472E+11,
    1.0785971152707582E+11, 1.0790389017376692E+11, 1.0794806882045804E+11,
    1.0799224746714914E+11, 1.0803642611384024E+11, 1.0808060476053136E+11,
    1.0812478340722246E+11, 1.0816896205391356E+11, 1.0821314070060468E+11,
    1.0825731934729578E+11, 1.0830149799398688E+11, 1.08345676640678E+11,
    1.0838985528736909E+11, 1.084340339340602E+11, 1.0847821258075131E+11,
    1.0852239122744241E+11, 1.0856656987413353E+11, 1.0861074852082463E+11,
    1.0865492716751573E+11, 1.0869910581420685E+11, 1.0874328446089795E+11,
    1.0878746310758905E+11, 1.0883164175428017E+11, 1.0887582040097127E+11,
    1.0891999904766237E+11, 1.0896417769435349E+11, 1.0900835634104459E+11,
    1.0905253498773569E+11, 1.090967136344268E+11, 1.091408922811179E+11,
    1.09185070927809E+11, 1.0922924957450012E+11, 1.0927342822119122E+11,
    1.0931760686788234E+11, 1.0936178551457344E+11, 1.0940596416126454E+11,
    1.0945014280795566E+11, 1.0949432145464676E+11, 1.0953850010133786E+11,
    1.0958267874802898E+11, 1.0962685739472008E+11, 1.0967103604141118E+11,
    1.0971521468810229E+11, 1.097593933347934E+11, 1.098035719814845E+11,
    1.0984775062817561E+11, 1.0989192927486671E+11, 1.0993610792155782E+11,
    1.0998028656824893E+11, 1.1002446521494003E+11, 1.1006864386163115E+11,
    1.1011282250832225E+11, 1.1015700115501335E+11, 1.1020117980170447E+11,
    1.1024535844839557E+11, 1.1028953709508667E+11, 1.1033371574177779E+11,
    1.1037789438846889E+11, 1.1042207303515999E+11, 1.104662516818511E+11,
    1.1051043032854221E+11, 1.1055460897523331E+11, 1.1059878762192442E+11,
    1.1064296626861552E+11, 1.1068714491530663E+11, 1.1073132356199774E+11,
    1.1077550220868884E+11, 1.1081968085537996E+11, 1.1086385950207106E+11,
    1.1090803814876216E+11, 1.1095221679545328E+11, 1.1099639544214438E+11,
    1.1104057408883548E+11, 1.110847527355266E+11, 1.111289313822177E+11,
    1.111731100289088E+11, 1.1121728867559991E+11, 1.1126146732229102E+11,
    1.1130564596898212E+11, 1.1134982461567323E+11, 1.1139400326236433E+11,
    1.1143818190905544E+11, 1.1148236055574655E+11, 1.1152653920243765E+11,
    1.1157071784912877E+11, 1.1161489649581987E+11, 1.1165907514251097E+11,
    1.1170325378920209E+11, 1.1174743243589319E+11, 1.1179161108258429E+11,
    1.1183578972927541E+11, 1.1187996837596651E+11, 1.1192414702265761E+11,
    1.1196832566934872E+11, 1.1201250431603983E+11, 1.1205668296273093E+11,
    1.1210086160942204E+11, 1.1214504025611314E+11, 1.1218921890280424E+11,
    1.1223339754949536E+11, 1.1227757619618646E+11, 1.1232175484287758E+11,
    1.1236593348956868E+11, 1.1241011213625978E+11, 1.124542907829509E+11,
    1.12498469429642E+11, 1.125426480763331E+11, 1.1258682672302422E+11,
    1.1263100536971532E+11, 1.1267518401640642E+11, 1.1271936266309753E+11,
    1.1276354130978864E+11, 1.1280771995647974E+11, 1.1285189860317085E+11,
    1.1289607724986195E+11, 1.1294025589655307E+11, 1.1298443454324417E+11,
    1.1302861318993527E+11, 1.1307279183662639E+11, 1.1311697048331749E+11,
    1.1316114913000859E+11, 1.1320532777669971E+11, 1.1324950642339081E+11,
    1.1329368507008191E+11, 1.1333786371677303E+11, 1.1338204236346413E+11,
    1.1342622101015523E+11, 1.1347039965684634E+11, 1.1351457830353745E+11,
    1.1355875695022855E+11, 1.1360293559691966E+11, 1.1364711424361076E+11,
    1.1369129289030188E+11, 1.1373547153699298E+11, 1.1377965018368408E+11,
    1.138238288303752E+11, 1.138680074770663E+11, 1.139121861237574E+11,
    1.1395636477044852E+11, 1.1400054341713962E+11, 1.1404472206383072E+11,
    1.1408890071052184E+11, 1.1413307935721294E+11, 1.1417725800390404E+11,
    1.1422143665059515E+11, 1.1426561529728625E+11, 1.1430979394397736E+11,
    1.1435397259066847E+11, 1.1439815123735957E+11, 1.1444232988405069E+11,
    1.1448650853074179E+11, 1.1453068717743289E+11, 1.1457486582412401E+11,
    1.1461904447081511E+11, 1.1466322311750621E+11, 1.1470740176419733E+11,
    1.1475158041088843E+11, 1.1479575905757953E+11, 1.1483993770427065E+11,
    1.1488411635096175E+11, 1.1492829499765285E+11, 1.1497247364434396E+11,
    1.1501665229103506E+11, 1.1506083093772617E+11, 1.1510500958441728E+11,
    1.1514918823110838E+11, 1.151933668777995E+11, 1.152375455244906E+11,
    1.152817241711817E+11, 1.1532590281787282E+11, 1.1537008146456392E+11,
    1.1541426011125502E+11, 1.1545843875794614E+11, 1.1550261740463724E+11,
    1.1554679605132834E+11, 1.1559097469801945E+11, 1.1563515334471056E+11,
    1.1567933199140166E+11, 1.1572351063809277E+11, 1.1576768928478387E+11,
    1.1581186793147498E+11, 1.1585604657816609E+11, 1.1590022522485719E+11,
    1.1594440387154831E+11, 1.1598858251823941E+11, 1.1603276116493051E+11,
    1.1607693981162163E+11, 1.1612111845831273E+11, 1.1616529710500383E+11,
    1.1620947575169495E+11, 1.1625365439838605E+11, 1.1629783304507715E+11,
    1.1634201169176826E+11, 1.1638619033845937E+11, 1.1643036898515047E+11,
    1.1647454763184158E+11, 1.1651872627853268E+11, 1.1656290492522379E+11,
    1.166070835719149E+11, 1.16651262218606E+11, 1.1669544086529712E+11,
    1.1673961951198822E+11, 1.1678379815867932E+11, 1.1682797680537044E+11,
    1.1687215545206154E+11, 1.1691633409875264E+11, 1.1696051274544376E+11,
    1.1700469139213486E+11, 1.1704887003882596E+11, 1.1709304868551707E+11,
    1.1713722733220818E+11, 1.1718140597889928E+11, 1.1722558462559039E+11,
    1.1726976327228149E+11, 1.173139419189726E+11, 1.1735812056566371E+11,
    1.1740229921235481E+11, 1.1744647785904593E+11, 1.1749065650573703E+11,
    1.1753483515242813E+11, 1.1757901379911925E+11, 1.1762319244581035E+11,
    1.1766737109250145E+11, 1.1771154973919257E+11, 1.1775572838588367E+11,
    1.1779990703257477E+11, 1.1784408567926588E+11, 1.1788826432595699E+11,
    1.1793244297264809E+11, 1.179766216193392E+11, 1.180208002660303E+11,
    1.1806497891272141E+11, 1.1810915755941252E+11, 1.1815333620610362E+11,
    1.1819751485279474E+11, 1.1824169349948584E+11, 1.1828587214617694E+11,
    1.1833005079286806E+11, 1.1837422943955916E+11, 1.1841840808625026E+11,
    1.1846258673294138E+11, 1.1850676537963248E+11, 1.1855094402632358E+11,
    1.1859512267301469E+11, 1.186393013197058E+11, 1.186834799663969E+11,
    1.1872765861308801E+11, 1.1877183725977911E+11, 1.1881601590647021E+11,
    1.1886019455316133E+11, 1.1890437319985243E+11, 1.1894855184654355E+11,
    1.1899273049323465E+11, 1.1903690913992575E+11, 1.1908108778661687E+11,
    1.1912526643330797E+11, 1.1916944507999907E+11, 1.1921362372669019E+11,
    1.1925780237338129E+11, 1.1930198102007239E+11, 1.193461596667635E+11,
    1.1939033831345461E+11, 1.1943451696014571E+11, 1.1947869560683682E+11,
    1.1952287425352792E+11, 1.1956705290021904E+11, 1.1961123154691014E+11,
    1.1965541019360124E+11, 1.1969958884029236E+11, 1.1974376748698346E+11,
    1.1978794613367456E+11, 1.1983212478036568E+11, 1.1987630342705678E+11,
    1.1992048207374788E+11, 1.19964660720439E+11, 1.200088393671301E+11,
    1.200530180138212E+11, 1.2009719666051231E+11, 1.2014137530720341E+11,
    1.2018555395389452E+11, 1.2022973260058563E+11, 1.2027391124727673E+11,
    1.2031808989396785E+11, 1.2036226854065895E+11, 1.2040644718735005E+11,
    1.2045062583404117E+11, 1.2049480448073227E+11, 1.2053898312742337E+11,
    1.2058316177411449E+11, 1.2062734042080559E+11, 1.2067151906749669E+11,
    1.2071569771418781E+11, 1.2075987636087891E+11, 1.2080405500757E+11,
    1.2084823365426112E+11, 1.2089241230095222E+11, 1.2093659094764333E+11,
    1.2098076959433444E+11, 1.2102494824102554E+11, 1.2106912688771666E+11,
    1.2111330553440776E+11, 1.2115748418109886E+11, 1.2120166282778998E+11,
    1.2124584147448108E+11, 1.2129002012117218E+11, 1.213341987678633E+11,
    1.213783774145544E+11, 1.214225560612455E+11, 1.2146673470793661E+11,
    1.2151091335462772E+11, 1.2155509200131882E+11, 1.2159927064800993E+11,
    1.2164344929470103E+11, 1.2168762794139214E+11, 1.2173180658808325E+11,
    1.2177598523477435E+11, 1.2182016388146547E+11, 1.2186434252815657E+11,
    1.2190852117484767E+11, 1.2195269982153879E+11, 1.2199687846822989E+11,
    1.2204105711492099E+11, 1.2208523576161211E+11, 1.2212941440830321E+11,
    1.2217359305499431E+11, 1.2221777170168542E+11, 1.2226195034837653E+11,
    1.2230612899506763E+11, 1.2235030764175874E+11, 1.2239448628844984E+11,
    1.2243866493514095E+11, 1.2248284358183206E+11, 1.2252702222852316E+11,
    1.2257120087521428E+11, 1.2261537952190538E+11, 1.2265955816859648E+11,
    1.227037368152876E+11, 1.227479154619787E+11, 1.227920941086698E+11,
    1.2283627275536092E+11, 1.2288045140205202E+11, 1.2292463004874312E+11,
    1.2296880869543423E+11, 1.2301298734212534E+11, 1.2305716598881644E+11,
    1.2310134463550755E+11, 1.2314552328219865E+11, 1.2318970192888976E+11,
    1.2323388057558087E+11, 1.2327805922227197E+11, 1.2332223786896309E+11,
    1.2336641651565419E+11, 1.2341059516234529E+11, 1.2345477380903641E+11,
    1.2349895245572751E+11, 1.2354313110241861E+11, 1.2358730974910973E+11,
    1.2363148839580083E+11, 1.2367566704249193E+11, 1.2371984568918304E+11,
    1.2376402433587415E+11, 1.2380820298256525E+11, 1.2385238162925636E+11,
    1.2389656027594746E+11, 1.2394073892263857E+11, 1.2398491756932968E+11,
    1.2402909621602078E+11, 1.240732748627119E+11, 1.24117453509403E+11,
    1.241616321560941E+11, 1.2420581080278522E+11, 1.2424998944947632E+11,
    1.2429416809616742E+11, 1.2433834674285854E+11, 1.2438252538954964E+11,
    1.2442670403624074E+11, 1.2447088268293185E+11, 1.2451506132962296E+11,
    1.2455923997631406E+11, 1.2460341862300517E+11, 1.2464759726969627E+11,
    1.2469177591638737E+11, 1.2473595456307849E+11, 1.2478013320976959E+11,
    1.2482431185646071E+11, 1.2486849050315181E+11, 1.2491266914984291E+11,
    1.2495684779653403E+11, 1.2500102644322513E+11, 1.2504520508991623E+11,
    1.2508938373660735E+11, 1.2513356238329845E+11, 1.2517774102998955E+11,
    1.2522191967668066E+11, 1.2526609832337177E+11, 1.2531027697006287E+11,
    1.2535445561675398E+11, 1.2539863426344508E+11, 1.2544281291013618E+11,
    1.254869915568273E+11, 1.255311702035184E+11, 1.2557534885020952E+11,
    1.2561952749690062E+11, 1.2566370614359172E+11, 1.2570788479028284E+11,
    1.2575206343697394E+11, 1.2579624208366504E+11, 1.2584042073035616E+11,
    1.2588459937704726E+11, 1.2592877802373836E+11, 1.2597295667042947E+11,
    1.2601713531712057E+11, 1.2606131396381168E+11, 1.2610549261050279E+11,
    1.2614967125719389E+11, 1.2619384990388501E+11, 1.2623802855057611E+11,
    1.2628220719726721E+11, 1.2632638584395833E+11, 1.2637056449064943E+11,
    1.2641474313734053E+11, 1.2645892178403165E+11, 1.2650310043072275E+11,
    1.2654727907741385E+11, 1.2659145772410497E+11, 1.2663563637079607E+11,
    1.2667981501748717E+11, 1.2672399366417828E+11, 1.2676817231086938E+11,
    1.2681235095756049E+11, 1.268565296042516E+11, 1.269007082509427E+11,
    1.2694488689763382E+11, 1.2698906554432492E+11, 1.2703324419101602E+11,
    1.2707742283770714E+11, 1.2712160148439824E+11, 1.2716578013108934E+11,
    1.2720995877778046E+11, 1.2725413742447156E+11, 1.2729831607116266E+11,
    1.2734249471785378E+11, 1.2738667336454488E+11, 1.2743085201123598E+11,
    1.2747503065792709E+11, 1.2751920930461819E+11, 1.275633879513093E+11,
    1.2760756659800041E+11, 1.2765174524469151E+11, 1.2769592389138263E+11,
    1.2774010253807373E+11, 1.2778428118476483E+11, 1.2782845983145595E+11,
    1.2787263847814705E+11, 1.2791681712483815E+11, 1.2796099577152927E+11,
    1.2800517441822037E+11, 1.2804935306491147E+11, 1.2809353171160258E+11,
    1.2813771035829369E+11, 1.2818188900498479E+11, 1.282260676516759E+11,
    1.28270246298367E+11, 1.2831442494505811E+11, 1.2835860359174922E+11,
    1.2840278223844032E+11, 1.2844696088513144E+11, 1.2849113953182254E+11,
    1.2853531817851364E+11, 1.2857949682520476E+11, 1.2862367547189586E+11,
    1.2866785411858696E+11, 1.2871203276527808E+11, 1.2875621141196918E+11,
    1.2880039005866028E+11, 1.2884456870535139E+11, 1.288887473520425E+11,
    1.289329259987336E+11, 1.2897710464542471E+11, 1.2902128329211581E+11,
    1.2906546193880692E+11, 1.2910964058549803E+11, 1.2915381923218913E+11,
    1.2919799787888025E+11, 1.2924217652557135E+11, 1.2928635517226245E+11,
    1.2933053381895357E+11, 1.2937471246564467E+11, 1.2941889111233577E+11,
    1.2946306975902689E+11, 1.2950724840571799E+11, 1.2955142705240909E+11,
    1.295956056991002E+11, 1.2963978434579131E+11, 1.2968396299248241E+11,
    1.2972814163917352E+11, 1.2977232028586462E+11, 1.2981649893255573E+11,
    1.2986067757924684E+11, 1.2990485622593794E+11, 1.2994903487262906E+11,
    1.2999321351932016E+11, 1.3003739216601126E+11, 1.3008157081270238E+11,
    1.3012574945939348E+11, 1.3016992810608458E+11, 1.302141067527757E+11,
    1.302582853994668E+11, 1.303024640461579E+11, 1.3034664269284901E+11,                                                                                                                                                                                                                       
    1.3052335727961343E+11, 1.3056753592630453E+11, 1.3061171457299565E+11,
    1.3065589321968675E+11, 1.3070007186637787E+11, 1.3074425051306897E+11,
    1.3078842915976007E+11, 1.3083260780645119E+11, 1.3087678645314229E+11,
    1.3092096509983339E+11, 1.3096514374652451E+11, 1.3100932239321561E+11,
    1.3105350103990671E+11, 1.3109767968659782E+11, 1.3114185833328893E+11,
    1.3118603697998003E+11, 1.3123021562667114E+11, 1.3127439427336224E+11,
    1.3131857292005334E+11, 1.3136275156674446E+11, 1.3140693021343556E+11,
    1.3145110886012668E+11, 1.3149528750681778E+11, 1.3153946615350888E+11,
    1.315836448002E+11, 1.316278234468911E+11, 1.316720020935822E+11,
    1.3171618074027332E+11, 1.3176035938696442E+11, 1.3180453803365552E+11,
    1.3184871668034663E+11, 1.3189289532703773E+11, 1.3193707397372884E+11,
    1.3198125262041995E+11, 1.3202543126711105E+11, 1.3206960991380215E+11,
    1.3211378856049327E+11, 1.3215796720718437E+11, 1.3220214585387549E+11,
    1.3224632450056659E+11, 1.3229050314725769E+11, 1.3233468179394881E+11,
    1.3237886044063991E+11, 1.3242303908733101E+11, 1.3246721773402213E+11,
    1.3251139638071323E+11, 1.3255557502740433E+11, 1.3259975367409544E+11,
    1.3264393232078654E+11, 1.3268811096747765E+11, 1.3273228961416876E+11,
    1.3277646826085986E+11, 1.3282064690755098E+11, 1.3286482555424208E+11,
    1.3290900420093318E+11, 1.329531828476243E+11, 1.329973614943154E+11,
    1.330415401410065E+11, 1.3308571878769762E+11, 1.3312989743438872E+11,
    1.3317407608107982E+11, 1.3321825472777094E+11, 1.3326243337446204E+11,
    1.3330661202115314E+11, 1.3335079066784425E+11, 1.3339496931453535E+11,
    1.3343914796122646E+11, 1.3348332660791757E+11, 1.3352750525460867E+11,
    1.3357168390129979E+11, 1.3361586254799089E+11, 1.3366004119468199E+11,
    1.3370421984137311E+11, 1.3374839848806421E+11, 1.3379257713475531E+11,
    1.3383675578144643E+11, 1.3388093442813753E+11, 1.3392511307482863E+11,
    1.3396929172151974E+11, 1.3401347036821085E+11, 1.3405764901490195E+11,
    1.3410182766159306E+11, 1.3414600630828416E+11, 1.3419018495497527E+11,
    1.3423436360166638E+11, 1.3427854224835748E+11, 1.343227208950486E+11,
    1.343668995417397E+11, 1.344110781884308E+11, 1.3445525683512192E+11,
    1.3449943548181302E+11, 1.3454361412850412E+11, 1.3458779277519524E+11,
    1.3463197142188634E+11, 1.3467615006857744E+11, 1.3472032871526855E+11,
    1.3476450736195966E+11, 1.3480868600865076E+11, 1.3485286465534187E+11,
    1.3489704330203297E+11, 1.3494122194872408E+11, 1.3498540059541519E+11,
    1.3502957924210629E+11, 1.3507375788879741E+11, 1.3511793653548851E+11,
    1.3516211518217961E+11, 1.3520629382887073E+11, 1.3525047247556183E+11,
    1.3529465112225293E+11, 1.3533882976894405E+11, 1.3538300841563515E+11,
    1.3542718706232625E+11, 1.3547136570901736E+11, 1.3551554435570847E+11,
    1.3555972300239957E+11, 1.3560390164909068E+11, 1.3564808029578178E+11,
    1.3569225894247289E+11, 1.35736437589164E+11, 1.357806162358551E+11,
    1.3582479488254622E+11, 1.3586897352923732E+11, 1.3591315217592842E+11,
    1.3595733082261954E+11, 1.3600150946931064E+11, 1.3604568811600174E+11,
    1.3608986676269286E+11, 1.3613404540938396E+11, 1.3617822405607506E+11,
    1.3622240270276617E+11, 1.3626658134945728E+11, 1.3631075999614838E+11,
    1.3635493864283949E+11, 1.3639911728953059E+11, 1.3644329593622169E+11,
    1.3648747458291281E+11, 1.3653165322960391E+11, 1.3657583187629503E+11,
    1.3662001052298613E+11, 1.3666418916967723E+11, 1.3670836781636835E+11,
    1.3675254646305945E+11, 1.3679672510975055E+11, 1.3684090375644167E+11,
    1.3688508240313277E+11, 1.3692926104982387E+11, 1.3697343969651498E+11,
    1.3701761834320609E+11, 1.3706179698989719E+11, 1.371059756365883E+11,
    1.371501542832794E+11, 1.371943329299705E+11, 1.3723851157666162E+11,
    1.3728269022335272E+11, 1.3732686887004384E+11, 1.3737104751673494E+11,
    1.3741522616342604E+11, 1.3745940481011716E+11, 1.3750358345680826E+11,
    1.3754776210349936E+11, 1.3759194075019046E+11, 1.3763611939688159E+11,
    1.3768029804357269E+11, 1.3772447669026379E+11, 1.377686553369549E+11,
    1.37812833983646E+11, 1.378570126303371E+11, 1.3790119127702823E+11,
    1.3794536992371933E+11, 1.3798954857041043E+11, 1.3803372721710153E+11,
    1.3807790586379263E+11, 1.3812208451048373E+11, 1.3816626315717487E+11,
    1.3821044180386597E+11, 1.3825462045055707E+11, 1.3829879909724817E+11,
    1.3834297774393927E+11, 1.383871563906304E+11, 1.384313350373215E+11,
    1.384755136840126E+11, 1.385196923307037E+11, 1.3856387097739481E+11,
    1.3860804962408591E+11, 1.3865222827077704E+11, 1.3869640691746814E+11,
    1.3874058556415924E+11, 1.3878476421085034E+11, 1.3882894285754144E+11,
    1.3887312150423254E+11, 1.3891730015092368E+11, 1.3896147879761478E+11,
    1.3900565744430588E+11, 1.3904983609099698E+11, 1.3909401473768808E+11,
    1.3913819338437921E+11, 1.3918237203107031E+11, 1.3922655067776141E+11,
    1.3927072932445251E+11, 1.3931490797114362E+11, 1.3935908661783472E+11,
    1.3940326526452585E+11, 1.3944744391121695E+11, 1.3949162255790805E+11,
    1.3953580120459915E+11, 1.3957997985129025E+11, 1.3962415849798135E+11,
    1.3966833714467249E+11, 1.3971251579136359E+11, 1.3975669443805469E+11,
    1.3980087308474579E+11, 1.3984505173143689E+11, 1.3988923037812802E+11,
    1.3993340902481912E+11, 1.3997758767151022E+11, 1.4002176631820132E+11,
    1.4006594496489243E+11, 1.4011012361158353E+11, 1.4015430225827466E+11,
    1.4019848090496576E+11, 1.4024265955165686E+11, 1.4028683819834796E+11,
    1.4033101684503906E+11, 1.4037519549173016E+11, 1.404193741384213E+11,
    1.404635527851124E+11, 1.405077314318035E+11, 1.405519100784946E+11,
    1.405960887251857E+11, 1.4064026737187683E+11, 1.4068444601856793E+11,
    1.4072862466525903E+11, 1.4077280331195013E+11, 1.4081698195864124E+11,
    1.4086116060533234E+11, 1.4090533925202347E+11, 1.4094951789871457E+11,
    1.4099369654540567E+11, 1.4103787519209677E+11, 1.4108205383878787E+11,
    1.4112623248547897E+11, 1.411704111321701E+11, 1.4121458977886121E+11,
    1.4125876842555231E+11, 1.4130294707224341E+11, 1.4134712571893451E+11,
    1.4139130436562564E+11, 1.4143548301231674E+11, 1.4147966165900784E+11,
    1.4152384030569894E+11, 1.4156801895239005E+11, 1.4161219759908115E+11,
    1.4165637624577228E+11, 1.4170055489246338E+11, 1.4174473353915448E+11,
    1.4178891218584558E+11, 1.4183309083253668E+11, 1.4187726947922778E+11,
    1.4192144812591891E+11, 1.4196562677261002E+11, 1.4200980541930112E+11,
    1.4205398406599222E+11, 1.4209816271268332E+11, 1.4214234135937445E+11,
    1.4218652000606555E+11, 1.4223069865275665E+11, 1.4227487729944775E+11,
    1.4231905594613885E+11, 1.4236323459282996E+11, 1.4240741323952109E+11,
    1.4245159188621219E+11, 1.4249577053290329E+11, 1.4253994917959439E+11,
    1.4258412782628549E+11, 1.4262830647297659E+11, 1.4267248511966772E+11,
    1.4271666376635883E+11, 1.4276084241304993E+11, 1.4280502105974103E+11,
    1.4284919970643213E+11, 1.4289337835312326E+11, 1.4293755699981436E+11,
    1.4298173564650546E+11, 1.4302591429319656E+11, 1.4307009293988766E+11,
    1.4311427158657877E+11, 1.431584502332699E+11, 1.43202628879961E+11,
    1.432468075266521E+11, 1.432909861733432E+11, 1.433351648200343E+11,
    1.433793434667254E+11, 1.4342352211341653E+11, 1.4346770076010764E+11,
    1.4351187940679874E+11, 1.4355605805348984E+11, 1.4360023670018094E+11,
    1.4364441534687207E+11, 1.4368859399356317E+11, 1.4373277264025427E+11,
    1.4377695128694537E+11, 1.4382112993363647E+11, 1.4386530858032758E+11,
    1.4390948722701871E+11, 1.4395366587370981E+11, 1.4399784452040091E+11,
    1.44042023167092E+11, 1.4408620181378311E+11, 1.4413038046047421E+11,
    1.4417455910716534E+11, 1.4421873775385645E+11, 1.4426291640054755E+11,
    1.4430709504723865E+11, 1.4435127369392975E+11, 1.4439545234062088E+11,
    1.4443963098731198E+11, 1.4448380963400308E+11, 1.4452798828069418E+11,
    1.4457216692738528E+11, 1.4461634557407639E+11, 1.4466052422076752E+11,
    1.4470470286745862E+11, 1.4474888151414972E+11, 1.4479306016084082E+11,
    1.4483723880753192E+11, 1.4488141745422302E+11, 1.4492559610091415E+11,
    1.4496977474760526E+11, 1.4501395339429636E+11, 1.4505813204098746E+11,
    1.4510231068767856E+11, 1.4514648933436969E+11, 1.4519066798106079E+11,
    1.4523484662775189E+11, 1.45279025274443E+11, 1.4532320392113409E+11,
    1.453673825678252E+11, 1.4541156121451633E+11, 1.4545573986120743E+11,
    1.4549991850789853E+11, 1.4554409715458963E+11, 1.4558827580128073E+11,
    1.4563245444797183E+11, 1.4567663309466296E+11, 1.4572081174135406E+11,
    1.4576499038804517E+11, 1.4580916903473627E+11, 1.4585334768142737E+11,
    1.458975263281185E+11, 1.459417049748096E+11, 1.459858836215007E+11,
    1.460300622681918E+11, 1.460742409148829E+11, 1.46118419561574E+11,
    1.4616259820826514E+11, 1.4620677685495624E+11, 1.4625095550164734E+11,
    1.4629513414833844E+11, 1.4633931279502954E+11, 1.4638349144172064E+11,
    1.4642767008841177E+11, 1.4647184873510287E+11, 1.4651602738179398E+11,
    1.4656020602848508E+11, 1.4660438467517618E+11, 1.4664856332186731E+11,
    1.4669274196855841E+11, 1.4673692061524951E+11, 1.4678109926194061E+11,
    1.4682527790863171E+11, 1.4686945655532281E+11, 1.4691363520201395E+11,
    1.4695781384870505E+11, 1.4700199249539615E+11, 1.4704617114208725E+11,
    1.4709034978877835E+11, 1.4713452843546945E+11, 1.4717870708216058E+11,
    1.4722288572885168E+11, 1.4726706437554279E+11, 1.4731124302223389E+11,
    1.47355421668925E+11, 1.4739960031561612E+11, 1.4744377896230722E+11,
    1.4748795760899832E+11, 1.4753213625568942E+11, 1.4757631490238052E+11,
    1.4762049354907162E+11, 1.4766467219576276E+11, 1.4770885084245386E+11,
    1.4775302948914496E+11, 1.4779720813583606E+11, 1.4784138678252716E+11,
    1.4788556542921826E+11, 1.4792974407590939E+11, 1.4797392272260049E+11,
    1.480181013692916E+11, 1.480622800159827E+11, 1.481064586626738E+11,
    1.4815063730936493E+11, 1.4819481595605603E+11, 1.4823899460274713E+11 };
  int M = 150;
  int N = 200;	//?????��???????
  int num_a_size[2];
  double num_a_data[536];
  int tmp_size[2];
  double tmp_data[536];
  double b_tmp_data[536];
  double c_tmp_data[536];
  int b_tmp_size[2];
  int sig_Interp1_size[2];
  static creal_T resultimage_cut[30000];
  static double varargin_1[30000];
  double maxval[150];
  int c_tmp_size[2];
  creal_T sig_Interp1_data[536];
  creal_T d_tmp_data[536];
  b0 = false;

  // %%%%%%%%%%ISAR???????
  // %%%????
  // %%%STK??STK?????????????????��??????
  // %%%gassap1????????
  // %%%range_start???????????????
  // %%%?????
  // %%%I1???????????????????????????????
  // %%%image_PFA???????????????matlab?????figure???
  // %%%pixel_a????��??????
  // %%%Tobs????????????
  //
  // ???????
  // data=STK;   %???��??????
  idx = 0;
  ii = 1;
  jj = 1;
  exitg1 = false;
  while ((!exitg1) && (jj <= 1)) {
    guard1 = false;
    if (bv0[ii - 1]) {
      idx++;
      i_data[idx - 1] = ii;
      if (idx >= 536) {
        exitg1 = true;
      } else {
        guard1 = true;
      }
    } else {
      guard1 = true;
    }

    if (guard1) {
      ii++;
      if (ii > 536) {
        ii = 1;
        jj = 2;
      }
    }
  }

  data_size_idx_0 = 537 - i_data[0];
  jj = -i_data[0];
  for (i0 = 0; i0 < 7; i0++) {
    for (i1 = 0; i1 <= jj + 536; i1++) {
      data_data[i1 + data_size_idx_0 * i0] = data[((i_data[0] + i1) + 536 * i0)
        - 1];
    }
  }
  //     %% ??????????Ipp?��??��
  // ??z?????pi/2
  // ??x????pi/2
  //     %% ??????????
  // ????
  // ????????????
  // 400e6;     %????????????
  // ??????
  // ??????????
  // ???????????
  // ???????
  // ????
  // ???��??
  //      Nr = 2*Tp*Fr;     %????????
  // ????????
  //     %% ISAR????
  idx = 1;
  nn = 1;
  I1->size[0] = 0;
  I1->size[1] = 0;
  emxInit_real_T(&TargeRt, 1);
  emxInit_real_T(&X_radar, 1);
  emxInit_real_T(&Y_radar, 1);
  emxInit_real_T(&Z_radar, 1);
  emxInit_real_T(&x_radar, 1);
  emxInit_real_T(&theta, 1);
  emxInit_creal_T(&sig, 2);
  emxInit_creal_T(&sig_Interp1, 2);
  emxInit_real_T(&r0, 1);
  emxInit_creal_T(&r1, 2);
  //clock_t start,end; 
  while (nn <= data_size_idx_0) {
    if (idx > nn) {
      i0 = 0;
      i1 = 0;
    } else {
      i0 = idx - 1;
      i1 = nn;
    }

    jj = i1 - i0;
    for (i1 = 0; i1 < 7; i1++) {
      for (i2 = 0; i2 < jj; i2++) {
        Target_data[i2 + jj * i1] = data_data[(i0 + i2) + data_size_idx_0 * i1];
      }
    }
    //  ????STK??????????��??
    i0 = TargeRt->size[0];
    TargeRt->size[0] = jj;
    emxEnsureCapacity_real_T(TargeRt, i0);
    for (i0 = 0; i0 < jj; i0++) {
      TargeRt->data[i0] = Target_data[i0 + jj * 3] * 1000.0;
    }

    i0 = X_radar->size[0];
    X_radar->size[0] = jj;
    emxEnsureCapacity_real_T(X_radar, i0);
    for (i0 = 0; i0 < jj; i0++) {
      X_radar->data[i0] = Target_data[i0] * 1000.0;
    }

    i0 = Y_radar->size[0];
    Y_radar->size[0] = jj;
    emxEnsureCapacity_real_T(Y_radar, i0);
    for (i0 = 0; i0 < jj; i0++) {
      Y_radar->data[i0] = Target_data[i0 + jj] * 1000.0;
    }

    i0 = Z_radar->size[0];
    Z_radar->size[0] = jj;
    emxEnsureCapacity_real_T(Z_radar, i0);
    for (i0 = 0; i0 < jj; i0++) {
      Z_radar->data[i0] = Target_data[i0 + (jj << 1)] * 1000.0;
    }
    pixel_simulation(X_radar, Y_radar, &Rmin, &Rmax);
    //start = clock();
    if (Rmin <= 0.1) {
      std::cout << "------" << std::endl;
      for (i0 = 0; i0 < 7; i0++) {
        for (i1 = 0; i1 < nn; i1++) {
          Target_data[i1 + nn * i0] = data_data[i1 + data_size_idx_0 * i0];
        }
      }

      data_size_idx_0 = nn;
      jj = nn * 7;
      if (0 <= jj - 1) {
        memcpy(&data_data[0], &Target_data[0], (unsigned int)(jj * (int)sizeof
                (double)));
      }

      Na = ((double)nn - (double)idx) + 1.0;

      // ???��?��??????
      // ????????
      jj = TargeRt->size[0];
      if (TargeRt->size[0] <= 2) {
        if (TargeRt->size[0] == 1) {
          Rmax = TargeRt->data[0];
        } else if (TargeRt->data[0] < TargeRt->data[1]) {
          Rmax = TargeRt->data[1];
        } else {
          Rmax = TargeRt->data[0];
        }
      } else {
        Rmax = TargeRt->data[0];
        for (ii = 2; ii <= jj; ii++) {
          if (Rmax < TargeRt->data[ii - 1]) {
            Rmax = TargeRt->data[ii - 1];
          }
        }
      }
      jj = TargeRt->size[0];
      if (TargeRt->size[0] <= 2) {
        if (TargeRt->size[0] == 1) {
          Rmin = TargeRt->data[0];
        } else if (TargeRt->data[0] > TargeRt->data[1]) {
          Rmin = TargeRt->data[1];
        } else {
          Rmin = TargeRt->data[0];
        }
      } else {
        Rmin = TargeRt->data[0];
        for (ii = 2; ii <= jj; ii++) {
          if (Rmin > TargeRt->data[ii - 1]) {
            Rmin = TargeRt->data[ii - 1];
          }
        }
      }

      a = (Rmax + Rmin) / 2.0;

      // ??????????��??
      rdivide_helper(Y_radar, X_radar, TargeRt);
      b_atan(TargeRt);
      if (Na - 1.0 < 0.0) {
        ta_size_idx_1 = 0;
      } else {
        jj = (int)(Na - 1.0);
        ta_size_idx_1 = jj + 1;
        for (i0 = 0; i0 <= jj; i0++) {
          ta_data[i0] = i0;
        }
      }

      Rmax = Na / 2.0;
      jj = ta_size_idx_1 - 1;
      for (i0 = 0; i0 <= jj; i0++) {
        ta_data[i0] = (ta_data[i0] - Rmax) / 10.0;
      }

      //             %% ??????????
      // ?????????
      i0 = sig->size[0] * sig->size[1];
      sig->size[0] = 1024;
      i1 = (int)Na;
      sig->size[1] = i1;
      emxEnsureCapacity_creal_T(sig, i0);
      loop_ub_tmp = i1 << 10;
      for (i0 = 0; i0 < loop_ub_tmp; i0++) {
        sig->data[i0].re = 0.0;
        sig->data[i0].im = 0.0;
      }
      for (jj = 0; jj < i1; jj++) {
        //                 %% ??????��?????????
        for (ii = 0; ii < 383; ii++) {
          Ra = (X_radar->data[jj] * X_radar->data[jj] + Y_radar->data[jj] *
                Y_radar->data[jj]) + Z_radar->data[jj] * Z_radar->data[jj];
          c_sqrt(&Ra);
          b_a = X_radar->data[jj] - posxy[ii];
          Rmax = Y_radar->data[jj] - posxy[383 + ii];
          Rmin = Z_radar->data[jj] - posxy[766 + ii];
          b_a = (b_a * b_a + Rmax * Rmax) + Rmin * Rmin;
          c_sqrt(&b_a);
          Rmax = Ra - b_a;
          if (!b0) {
            for (i0 = 0; i0 < 1024; i0++) {
              dv1[i0] = -1.8E+9 + 3.515625E+6 * (double)i0;
            }

            b0 = true;
          }

          b_abs(dv1, dv2);
          for (i0 = 0; i0 < 1024; i0++) {
            dcv0[i0].re = Rmax * 0.0;
            dcv0[i0].im = Rmax * (dv3[i0] / 3.0E+8);
          }

          b_exp(dcv0);
          for (i0 = 0; i0 < 1024; i0++) {
            i2 = i0 + (jj << 10);
            sig->data[i2].re += (double)(dv2[i0] <= 1.5E+9) * dcv0[i0].re;
            sig->data[i2].im += (double)(dv2[i0] <= 1.5E+9) * dcv0[i0].im;
          }
        }
      }
      
      eml_fftshift(sig);
      system_clock::time_point time_2 = system_clock::now();
      std::chrono::duration<double, std::micro> elapsed1 = time_2 - time_1;
	    std::cout << "generate echo execution time:" << (double)elapsed1.count() << "us" << std::endl;
      //            %% 回波处理
      idx = (int)std::floor(Na / 2.0) - 1;
      Rg = a * a - Z_radar->data[idx] * Z_radar->data[idx];
      c_sqrt(&Rg);
      Rmin = std::cos(1.5707963267948966 - (3.1415926535897931 - TargeRt->
        data[idx]));
      Rmax = std::sin(1.5707963267948966 - (3.1415926535897931 - TargeRt->
        data[idx]));
      i0 = x_radar->size[0];
      x_radar->size[0] = X_radar->size[0];
      emxEnsureCapacity_real_T(x_radar, i0);
      jj = X_radar->size[0];
      for (i0 = 0; i0 < jj; i0++) {
        x_radar->data[i0] = X_radar->data[i0] * Rmin + Y_radar->data[i0] * Rmax;
      }

      Rmin = std::sin(1.5707963267948966 - (3.1415926535897931 - TargeRt->
        data[idx]));
      Rmax = std::cos(1.5707963267948966 - (3.1415926535897931 - TargeRt->
        data[idx]));
      i0 = X_radar->size[0];
      emxEnsureCapacity_real_T(X_radar, i0);
      jj = X_radar->size[0];
      for (i0 = 0; i0 < jj; i0++) {
        X_radar->data[i0] = -X_radar->data[i0] * Rmin + Y_radar->data[i0] * Rmax;
      }

      jj = i1 - 1;
      a = x_radar->data[jj] - x_radar->data[0];
      b_a = X_radar->data[jj] - X_radar->data[0];
      b_a = a * a + b_a * b_a;
      c_sqrt(&b_a);
      Ra = b_a / (Na * 0.1);
      Rmin = std::atan((X_radar->data[0] - X_radar->data[jj] / x_radar->data[0])
                       - x_radar->data[jj]);

      //  ????????
      rdivide_helper(x_radar, X_radar, theta);
      b_atan(theta);
      power(x_radar, r0);
      power(X_radar, Y_radar);
      i0 = r0->size[0];
      emxEnsureCapacity_real_T(r0, i0);
      jj = r0->size[0];
      for (i0 = 0; i0 < jj; i0++) {
        r0->data[i0] += Y_radar->data[i0];
      }

      b_sqrt(r0);
      rdivide_helper(Z_radar, r0, TargeRt);
      b_atan(TargeRt);
      i0 = r0->size[0];
      r0->size[0] = TargeRt->size[0];
      emxEnsureCapacity_real_T(r0, i0);
      jj = TargeRt->size[0];
      for (i0 = 0; i0 < jj; i0++) {
        r0->data[i0] = TargeRt->data[i0];
      }

      b_cos(r0);
      b_rdivide_helper(std::cos(TargeRt->data[idx]), r0, Y_radar);
      b_cos(theta);
      rdivide_helper(Y_radar, theta, TargeRt);
      num_a_size[0] = 1;
      num_a_size[1] = (int)(Na - 1.0) + 1;
      jj = (int)(Na - 1.0);
      for (i0 = 0; i0 <= jj; i0++) {
        num_a_data[i0] = 1.0 + (double)i0;
      }

      //             %%???
      i0 = sig_Interp1->size[0] * sig_Interp1->size[1];
      sig_Interp1->size[0] = 1024;
      sig_Interp1->size[1] = i1;
      emxEnsureCapacity_creal_T(sig_Interp1, i0);
      for (i0 = 0; i0 < loop_ub_tmp; i0++) {
        sig_Interp1->data[i0].re = 0.0;
        sig_Interp1->data[i0].im = 0.0;
      }

      fft(sig, r1);
      eml_fftshift(r1);
      eml_fftshift(r1);
      ifft(r1, sig);
      eml_fftshift(sig);
      for (ii = 0; ii < i1; ii++) {
        b_a = 1.0E+10 * (TargeRt->data[ii] - 1.0);
        Rmax = TargeRt->data[ii];
        for (i0 = 0; i0 < 1024; i0++) {
          dv2[i0] = ((b_a + (-1.8E+9 + 3.515625E+6 * (double)i0) * Rmax) -
                     -1.8E+9) / 3.515625E+6;
        }

        i0 = ii << 10;
        interp1(*(creal_T (*)[1024])&sig->data[i0], dv2, *(creal_T (*)[1024])&
                sig_Interp1->data[i0]);
      }

      i0 = sig->size[0] * sig->size[1];
      sig->size[0] = 1024;
      sig->size[1] = i1;
      emxEnsureCapacity_creal_T(sig, i0);
      for (i0 = 0; i0 < loop_ub_tmp; i0++) {
        sig->data[i0].re = 0.0;
        sig->data[i0].im = 0.0;
      }

      Rmin = std::cos(1.5707963267948966 - Rmin);
      Rmax = ta_data[1] - ta_data[0];
      for (ii = 0; ii < 1024; ii++) {
        tmp_size[0] = 1;
        tmp_size[1] = ta_size_idx_1;
        for (i0 = 0; i0 < ta_size_idx_1; i0++) {
          tmp_data[i0] = 1.0E+10 * ta_data[i0] * 1.325;
        }

        b_a = 1.0E+10 + (-1.8E+9 + 3.515625E+6 * (double)ii);
        for (i0 = 0; i0 < ta_size_idx_1; i0++) {
          b_tmp_data[i0] = b_a + Ra * ta_data[i0] * 1.325 * 1.0E+10 * Rmin / Rg;
        }

        c_rdivide_helper(tmp_data, tmp_size, b_tmp_data, c_tmp_data, b_tmp_size);
        jj = sig_Interp1->size[1];
        sig_Interp1_size[0] = 1;
        sig_Interp1_size[1] = jj;
        for (i0 = 0; i0 < jj; i0++) {
          sig_Interp1_data[i0] = sig_Interp1->data[ii + (i0 << 10)];
        }

        c_tmp_size[0] = 1;
        c_tmp_size[1] = b_tmp_size[1];
        jj = b_tmp_size[0] * b_tmp_size[1];
        for (i0 = 0; i0 < jj; i0++) {
          tmp_data[i0] = (c_tmp_data[i0] - ta_data[0]) / Rmax;
        }

        b_interp1(num_a_data, num_a_size, sig_Interp1_data, sig_Interp1_size,
                  tmp_data, c_tmp_size, d_tmp_data, b_tmp_size);
        jj = b_tmp_size[1];
        for (i0 = 0; i0 < jj; i0++) {
          sig->data[ii + (i0 << 10)] = d_tmp_data[i0];
        }
      }

      // ??????
      eml_fftshift(sig);
      fft(sig, r1);
      eml_fftshift(r1);
      fftshift(r1);
      b_fft(r1, sig);
      fftshift(sig);
      for (i0 = 0; i0 < 150; i0++) {
        for (i1 = 0; i1 < 200; i1++) {
          resultimage_cut[i1 + 200 * i0] = sig->data[(i1 + (((i0 + idx) - 74) <<
            10)) + 412];
        }
      }

      // figure,imagesc(pa_cut,pb_cut,abs(resultimage_cut)),colormap(hot),title('????????????'),xlabel('??��??m??'),ylabel('??????m??'); 
      c_abs(resultimage_cut, varargin_1);
      for (jj = 0; jj < 150; jj++) {
        maxval[jj] = varargin_1[200 * jj];
        for (idx = 0; idx < 199; idx++) {
          b_a = varargin_1[(idx + 200 * jj) + 1];
          if ((!rtIsNaN(b_a)) && (rtIsNaN(maxval[jj]) || (maxval[jj] < b_a))) {
            maxval[jj] = b_a;
          }
        }
      }

      if (!rtIsNaN(maxval[0])) {
        idx = 1;
      } else {
        idx = 0;
        ii = 2;
        exitg1 = false;
        while ((!exitg1) && (ii < 151)) {
          if (!rtIsNaN(maxval[ii - 1])) {
            idx = ii;
            exitg1 = true;
          } else {
            ii++;
          }
        }
      }

      if (idx == 0) {
        Rmin = maxval[0];
      } else {
        Rmin = maxval[idx - 1];
        i0 = idx + 1;
        for (ii = i0; ii < 151; ii++) {
          b_a = maxval[ii - 1];
          if (Rmin < b_a) {
            Rmin = b_a;
          }
        }
      }

      //end = clock();
      //std::chrono::duration<double, std::micro> elapsed2 = time_3 - time_2;
	    //std::cout << "echo processing execution time:" << (double)elapsed2.count() << "us" << std::endl;
      //std::cout<<"..."<<std::endl;
      //std::cout<<"One loop time = "<<double(end-start)/CLOCKS_PER_SEC<<"s"<<std::endl;  //输出时间（单位：ｓ）
      Amplitude_limiting(resultimage_cut, 0.02 * Rmin, 0.1 * Rmin, varargin_1);
      i0 = I1->size[0] * I1->size[1];
      I1->size[0] = 200;
      I1->size[1] = 150;
      emxEnsureCapacity_real_T(I1, i0);
      for (i0 = 0; i0 < 30000; i0++) {
        I1->data[i0] = varargin_1[i0];
      }

      for (int i = 0; i < M; i++) {
          for (int j = 0; j < N; j++) {
              img.at<uchar>(i, j) = varargin_1[i*N+j];
              //img.at<creal_T>(i, j) = resultimage_cut[i * N + j];
          }
      }


      // ???
      // figure,imagesc(I1),colormap(hot),title('????????????');
      //  imwrite(I1,['1','m.tif'],'tif');%??tif?
      idx = nn;
      nn += 9;
    } else {
      nn += 9;
    }
  //end = clock();
  //std::cout<<"last time = "<<double(end-start)/CLOCKS_PER_SEC<<"s"<<std::endl;  //输出时间（单位：ｓ）
  }

  emxFree_creal_T(&r1);
  emxFree_real_T(&r0);
  emxFree_creal_T(&sig_Interp1);
  emxFree_creal_T(&sig);
  emxFree_real_T(&theta);
  emxFree_real_T(&x_radar);
  emxFree_real_T(&Z_radar);
  emxFree_real_T(&Y_radar);
  emxFree_real_T(&X_radar);
  emxFree_real_T(&TargeRt);

  //  pic_name=['imagingresult_number',num2str(Range_num),'_range',num2str(range_sta),'km_Plusenumber',num2str(Na),'_azimuth',num2str(pixel_a)]; 
  //  imwrite(I,['1','m.tif'],'tif');%??tif?
}

//
// File trailer for Fmain_ISARimaging.cpp
//
// [EOF]
//
